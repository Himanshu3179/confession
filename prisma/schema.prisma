// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  name                String       @unique
  email               String       @unique
  isVerified          Boolean      @default(false)
  emailVerified       DateTime?
  image               String?
  contact             String?
  hashedPassword      String?
  resetToken          String?
  resetTokenExpires   DateTime?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  accounts            Account[]
  sessions            Session[]
  isAdmin             Boolean      @default(false)
  sentConfessions     Confession[] @relation("from")
  receivedConfessions Confession[] @relation("to")
  likes               Like[]
}

model Confession {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  from        User?   @relation("from", fields: [fromId], references: [id])
  fromId      String? @db.ObjectId
  to          User?   @relation("to", fields: [toId], references: [id])
  toId        String? @db.ObjectId
  isPublic    Boolean @default(true)
  isAnonymous Boolean @default(false)

  likes Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  confession   Confession @relation(fields: [confessionId], references: [id])
  confessionId String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @db.ObjectId
  createdAt    DateTime   @default(now())
}
